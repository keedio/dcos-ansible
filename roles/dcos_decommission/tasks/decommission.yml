---
- name: Create maintenance window for node
  shell: >
    curl
    -X POST -H 'Content-Type:application/json' -H 'Authorization:token={{ token_resp.token }}'
    -d '{{ lookup('template', './maintenance_window.json.j2') |to_json }}'
    https://{{ groups['masters'][0] }}:5050/master/maintenance/schedule
    --cacert {{ cacert_destination_file }}
  register: maintenance_resp

- name: Get Cluster Status
  shell: >
    curl
    -X POST -H 'Content-Type:application/json' -H 'Authorization:token={{ token_resp.token }}'
    -d '{"type": "GET_STATE"}'
    https://{{ groups['masters'][0] }}:5050/api/v1
    --cacert {{ cacert_destination_file }}
  args:
    warn: False
  register: cluster_state_resp

- set_fact:
    cluster_state: "{{ cluster_state_resp.stdout|from_json }}"

#Extract the agent id from the cluster state json ,using a json_query filter
- set_fact:
    agentid: "{{ cluster_state | json_query(query) }}"
  vars:
    query: "get_state.get_agents.agents[?agent_info.hostname=='{{ inventory_hostname }}'].agent_info.id.value"

- debug: var=agentid

- name: Decommission node
  shell: >
    curl
    -X POST -H 'Content-Type:application/json' -H 'Authorization:token={{ token_resp.token }}'
    -d '{{ lookup('template', './decommission_node.json.j2') |to_json }}'
    https://{{ groups['masters'][0] }}:5050/api/v1
    --cacert {{ cacert_destination_file }}
  args:
    warn: False
  register: decommission_resp

- debug: var=decommission_resp

- name: Stop mesos slave process
  become: yes
  service:
    name: dcos-mesos-slave*
    state: stopped
  delegate_to: "{{ inventory_hostname }}"

- name: Shutdown node
  become: yes
  shell: sleep 2 && /sbin/shutdown -c && /sbin/shutdown -h now
  async: 1
  poll: 0
  delegate_to: "{{ inventory_hostname }}"